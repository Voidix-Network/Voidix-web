# Voidix网站生产环境Nginx配置
# 基于现代React+TypeScript+Vite架构优化

# ============================================================================
# CDN代理配置说明
# ============================================================================
# 本配置包含CDN代理功能，需要在主nginx.conf的http块中添加以下配置：
# proxy_cache_path /var/cache/nginx/voidix levels=1:2 keys_zone=voidix_cache:10m inactive=60m;
# proxy_temp_path /var/cache/nginx/voidix_temp;
#
# 以及Rate Limiting配置：
# limit_req_zone $binary_remote_addr zone=cdn_api:10m rate=30r/m;
# limit_req_zone $binary_remote_addr zone=cdn_assets:10m rate=60r/m;
#
# 代理功能包括：
# - Minecraft头像API代理和缓存
# - UptimeRobot监控API代理和缓存
# - Google Fonts代理和缓存
# - 自动排除分析JS脚本（GA、字节跳动等）
# - SEO友好的CDN防盗链保护机制（允许搜索引擎爬虫）
# ============================================================================

# HTTP重定向到HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name voidix.net www.voidix.net cdn.voidix.net;

    # 强制HTTPS重定向
    return 301 https://$server_name$request_uri;
}

# HTTPS主配置
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name voidix.net www.voidix.net;

    # SSL双证书配置 - ECC优先，RSA兼容
    # ECC证书（现代客户端，更高效）
    ssl_certificate /etc/nginx/ssl/voidix.net/ECC/voidix.cer;
    ssl_certificate_key /etc/nginx/ssl/voidix.net/ECC/voidix.key;

    # RSA证书（传统客户端兼容）
    ssl_certificate /etc/nginx/ssl/voidix.net/RSA/voidix.cer;
    ssl_certificate_key /etc/nginx/ssl/voidix.net/RSA/voidix.key;

    # SSL安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off; # For TLSv1.3, preference is largely client-driven; 'off' is fine.
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off; # Enhances forward secrecy.

    # HSTS安全头
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # 安全头配置
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always; # For older browsers, modern ones rely more on CSP.
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # CSP内容安全策略 - 为React应用和搜索引擎脚本优化
    # 注意: 'unsafe-inline' for script-src may be required by some JS/React patterns but is less secure.
    # 注意: 'unsafe-eval' for script-src is a security risk; ensure it's absolutely necessary.
    # 注意: 'https:' in img-src is broad; specify domains if possible for tighter security.
    # 注意: 'connect-src wss://$host;' assumes WebSocket connections (if any) are to the same host.
    #       If the /ws proxy is for dev HMR only, this might not be needed or could be more specific for prod.
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com https://lf1-cdn-tos.bytegoofy.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com https://cdn.voidix.net; font-src 'self' https://fonts.gstatic.com https://cdn.voidix.net; img-src 'self' data: https: blob: https://cdn.voidix.net; connect-src 'self' https://www.google-analytics.com https://api.uptimerobot.com https://cdn.voidix.net wss://$host; object-src 'none'; base-uri 'self'; form-action 'self';" always;

    # 网站根目录 - 指向构建文件目录
    root /var/www/voidix.net/dist;
    index index.html;

    # Gzip压缩配置
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml
        font/woff
        font/woff2;

    # SEO优化：HTML扩展名重定向配置 - 优先处理
    # 将 /x.html 重定向到 /x（无扩展名）
    # 使用负向前瞻断言排除 index.html 避免重定向循环
    location ~ ^/(?!index)(.+)\.html$ {
        return 301 /$1;
    }

    # 静态资源文件处理 - 不存在的文件重定向到React 404页面
    # 注意：不包含html文件，html文件由上面的重定向规则处理
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot|map|txt|xml)$ {
        # 尝试提供静态文件，如果不存在则重定向到 /not-found
        try_files $uri @static_not_found;

        # 静态文件缓存配置
        expires 1y;
        add_header Cache-Control "public, immutable";
        # X-Content-Type-Options "nosniff" is already set globally.

        # 字体文件CORS支持
        location ~* \.(woff|woff2)$ {
            add_header Access-Control-Allow-Origin "*";
            # expires and Cache-Control are inherited from the parent location.
        }
    }

    # PWA图标和Logo文件专用配置 - 防止过度请求
    location ~* ^/(android-chrome-|apple-touch-icon|favicon\.|logo\.) {
        try_files $uri =404;
        expires 30d;
        add_header Cache-Control "public, immutable";
        # Content-Type will be determined by Nginx based on mime.types for flexibility (e.g. favicon.ico, logo.svg)

        # 添加ETag支持，减少重复传输
        etag on;

        # 访问日志单独记录（可选）
        access_log /var/log/nginx/voidix_icons.log;
    }

    # 静态文件不存在时重定向到React 404页面
    location @static_not_found {
        return 302 /not-found;
    }

    # 主路由配置 - SPA应用路由，处理其他所有请求
    location / {
        # 尝试提供文件或目录，不存在则回退到index.html
        try_files $uri $uri/ /index.html;
    }

    # 预渲染页面直接服务（SEO优化）
    location /status {
        try_files /status/index.html /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    location /faq {
        try_files /faq/index.html /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    location /bug-report {
        try_files /bug-report/index.html /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    location /privacy {
        try_files /privacy/index.html /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }

    # API代理配置（如需要）
    location /api/ {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }

    # WebSocket支持（通常用于开发环境热重载 e.g., Vite HMR)
    # Consider removing or securing this appropriately if not used/needed in production.
    location /ws {
        proxy_pass http://localhost:5173; # Typically Vite dev server
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header Origin ""; # May be needed for dev server origin check
    }

    # SEO优化文件
    location = /robots.txt {
        add_header Content-Type text/plain;
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
    }

    location = /sitemap.xml {
        add_header Content-Type application/xml;
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
    }

    # 健康检查端点
    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # 隐藏敏感文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Deny access to .md, .json (except if explicitly served by other rules like static assets if manifest.json is used), .lock, .log files
    # Be cautious with denying all .json if specific JSON files need to be served from non-asset paths.
    location ~ \.(md|json|lock|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 错误页面配置
    # 只有服务器错误才重定向到index.html，404交给上面的配置处理
    error_page 500 502 503 504 /index.html;

    # 访问日志配置
    access_log /var/log/nginx/voidix_access.log;
    error_log /var/log/nginx/voidix_error.log;
}

# ============================================================================
# CDN子域名配置 - cdn.voidix.net 专用代理服务
# ============================================================================
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name cdn.voidix.net;

    # SSL证书配置 - 使用通配符证书或子域名证书
    # This structure is correct for Nginx to offer both ECC and RSA certificates.
    ssl_certificate /etc/nginx/ssl/voidix.net/ECC/voidix.cer;
    ssl_certificate_key /etc/nginx/ssl/voidix.net/ECC/voidix.key;
    ssl_certificate /etc/nginx/ssl/voidix.net/RSA/voidix.cer;
    ssl_certificate_key /etc/nginx/ssl/voidix.net/RSA/voidix.key;

    # SSL安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;

    # HSTS安全头
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # CDN专用安全头
    add_header X-Frame-Options "DENY" always; # More restrictive for CDN assets
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;

    # CDN服务标识
    add_header X-CDN-Provider "Voidix-CDN" always;
    add_header X-Served-By "cdn.voidix.net" always;

    # Gzip压缩配置
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml
        font/woff
        font/woff2;

    # ========================================================================
    # Minecraft头像API代理 - 简化路径设计
    # ========================================================================

    location ~* ^/mc-heads/(.+)$ {
        if ($valid_referer = 0) {
            return 403 "访问被拒绝：无效的来源";
        }
        limit_req zone=cdn_assets burst=10 nodelay;
        set $avatar_path $1;

        proxy_pass https://mc-heads.net/avatar/$avatar_path;
        proxy_cache voidix_cache;
        proxy_cache_key "mc_heads:$avatar_path";
        proxy_cache_valid 200 1d;
        proxy_cache_valid 404 1h;
        proxy_cache_valid any 30s;

        add_header X-Cache-Status $upstream_cache_status always;
        add_header Cache-Control "public, max-age=86400, immutable";
        add_header X-CDN-Cache "mc-heads-avatar" always;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;

        proxy_set_header Host "mc-heads.net";
        proxy_set_header User-Agent "VoidixCDN/1.0 (+https://cdn.voidix.net)";
        proxy_set_header Accept "image/*";
        proxy_set_header Accept-Encoding "gzip, deflate";

        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 10s;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        access_log /var/log/nginx/cdn_mc_heads.log;
    }

    location ~* ^/minotar/(.+)$ {
        if ($valid_referer = 0) {
            return 403 "访问被拒绝：无效的来源";
        }
        limit_req zone=cdn_assets burst=10 nodelay;
        set $avatar_path $1;

        proxy_pass https://minotar.net/helm/$avatar_path;
        proxy_cache voidix_cache;
        proxy_cache_key "minotar:$avatar_path";
        proxy_cache_valid 200 1d;
        proxy_cache_valid 404 1h;
        proxy_cache_valid any 30s;

        add_header X-Cache-Status $upstream_cache_status always;
        add_header Cache-Control "public, max-age=86400, immutable";
        add_header X-CDN-Cache "minotar-avatar" always;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;

        proxy_set_header Host "minotar.net";
        proxy_set_header User-Agent "VoidixCDN/1.0 (+https://cdn.voidix.net)";
        proxy_set_header Accept "image/*";
        proxy_set_header Accept-Encoding "gzip, deflate";

        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 10s;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        access_log /var/log/nginx/cdn_minotar.log;
    }

    location ~* ^/crafatar/(.+)$ {
        if ($valid_referer = 0) {
            return 403 "访问被拒绝：无效的来源";
        }
        limit_req zone=cdn_assets burst=10 nodelay;
        set $avatar_path $1;

        proxy_pass https://crafatar.com/avatars/$avatar_path;
        proxy_cache voidix_cache;
        proxy_cache_key "crafatar:$avatar_path";
        proxy_cache_valid 200 1d;
        proxy_cache_valid 404 1h;
        proxy_cache_valid any 30s;

        add_header X-Cache-Status $upstream_cache_status always;
        add_header Cache-Control "public, max-age=86400, immutable";
        add_header X-CDN-Cache "crafatar-avatar" always;
        add_header Access-Control-Allow-Origin "*" always;
        add_header Access-Control-Allow-Methods "GET, OPTIONS" always;

        proxy_set_header Host "crafatar.com";
        proxy_set_header User-Agent "VoidixCDN/1.0 (+https://cdn.voidix.net)";
        proxy_set_header Accept "image/*";
        proxy_set_header Accept-Encoding "gzip, deflate";

        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 10s;
        proxy_next_upstream error timeout invalid_header http_500 http_502 http_503;
        access_log /var/log/nginx/cdn_crafatar.log;
    }

    # ========================================================================
    # UptimeRobot API代理
    # ========================================================================
    location /uptime/ {
        if ($valid_referer = 0) {
            return 403 "访问被拒绝：无效的来源";
        }
        limit_req zone=cdn_api burst=5 nodelay;
        rewrite ^/uptime/(.*)$ /$1 break;

        proxy_pass https://api.uptimerobot.com/v2;
        proxy_cache voidix_cache;
        proxy_cache_key "uptime:$request_uri:$request_body";
        proxy_cache_valid 200 5m;
        proxy_cache_valid 404 1m;
        proxy_cache_valid any 30s;

        add_header X-Cache-Status $upstream_cache_status always;
        add_header Cache-Control "public, max-age=300";
        add_header X-CDN-Cache "uptime-api" always;
        add_header Access-Control-Allow-Origin "https://voidix.net" always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization" always;

        proxy_set_header Host "api.uptimerobot.com";
        proxy_set_header User-Agent "VoidixCDN/1.0 (+https://cdn.voidix.net)";
        # Content-Type for UptimeRobot API is typically application/x-www-form-urlencoded.
        # This is fine if client always sends data in this format or if API requires it.
        proxy_set_header Content-Type "application/x-www-form-urlencoded";

        proxy_connect_timeout 10s;
        proxy_send_timeout 10s;
        proxy_read_timeout 30s;
        access_log /var/log/nginx/cdn_uptime_api.log;
    }

    # ========================================================================
    # Google Fonts代理
    # ========================================================================

    location /fonts/css/ {
        if ($valid_referer = 0) {
            return 403 "访问被拒绝：无效的来源";
        }
        limit_req zone=cdn_assets burst=10 nodelay;
        rewrite ^/fonts/css/(.*)$ /$1 break;

        proxy_pass https://fonts.googleapis.com;
        proxy_cache voidix_cache;
        proxy_cache_key "fonts_css:$request_uri";
        proxy_cache_valid 200 7d;
        proxy_cache_valid 404 1h;
        proxy_cache_valid any 1h;

        add_header X-Cache-Status $upstream_cache_status always;
        add_header Cache-Control "public, max-age=604800, immutable";
        add_header X-CDN-Cache "fonts-css" always;
        add_header Access-Control-Allow-Origin "*" always;

        proxy_set_header Host "fonts.googleapis.com";
        proxy_set_header User-Agent "VoidixCDN/1.0 (+https://cdn.voidix.net)";
        proxy_set_header Accept "text/css,*/*;q=0.1";

        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 10s;
        access_log /var/log/nginx/cdn_fonts_css.log;
    }

    location /fonts/files/ {
        if ($valid_referer = 0) {
            return 403 "访问被拒绝：无效的来源";
        }
        limit_req zone=cdn_assets burst=10 nodelay;
        rewrite ^/fonts/files/(.*)$ /$1 break;

        proxy_pass https://fonts.gstatic.com;
        proxy_cache voidix_cache;
        proxy_cache_key "fonts_files:$request_uri";
        proxy_cache_valid 200 30d;
        proxy_cache_valid 404 1d;
        proxy_cache_valid any 1h;

        add_header X-Cache-Status $upstream_cache_status always;
        add_header Cache-Control "public, max-age=2592000, immutable";
        add_header X-CDN-Cache "fonts-files" always;
        add_header Access-Control-Allow-Origin "*" always;

        proxy_set_header Host "fonts.gstatic.com";
        proxy_set_header User-Agent "VoidixCDN/1.0 (+https://cdn.voidix.net)";
        proxy_set_header Accept "font/woff2,font/woff,*/*;q=0.1";

        proxy_connect_timeout 5s;
        proxy_send_timeout 5s;
        proxy_read_timeout 15s;
        access_log /var/log/nginx/cdn_fonts_files.log;
    }

    # ========================================================================
    # 安全策略 - 禁止分析JS代理
    # ========================================================================
    location ~* /(googletagmanager|google-analytics|lf1-cdn-tos\.bytegoofy) {
        return 403 "分析脚本不允许通过CDN代理";
    }

    # ========================================================================
    # CDN状态和健康检查
    # ========================================================================
    location = /cdn-status {
        access_log off;
        return 200 '{"status":"healthy","service":"voidix-cdn","version":"1.0"}';
        add_header Content-Type "application/json";
        add_header X-CDN-Status "active";
    }

    # 默认拒绝其他请求
    location / {
        return 404 "CDN服务：请求的资源不存在";
    }

    # 隐藏敏感文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    # 访问日志配置
    access_log /var/log/nginx/cdn_access.log;
    error_log /var/log/nginx/cdn_error.log;
}
