# Voidix网站生产环境Nginx配置
# 基于现代React+TypeScript+Vite架构优化

# ============================================================================
# 重要说明：简化版配置
# ============================================================================
# 此配置文件已移除CDN代理功能以避免proxy_cache配置问题
# 如需CDN功能，请在主nginx.conf中添加proxy_cache_path配置后再启用
# ============================================================================

# HTTP重定向到HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name voidix.net www.voidix.net;
    
    # 强制HTTPS重定向
    return 301 https://$server_name$request_uri;
}

# HTTPS主配置
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name voidix.net www.voidix.net;
    
    # SSL双证书配置 - ECC优先，RSA兼容
    # ECC证书（现代客户端，更高效）
    ssl_certificate /etc/nginx/ssl/voidix.net/ECC/voidix.cer;
    ssl_certificate_key /etc/nginx/ssl/voidix.net/ECC/voidix.key;
    
    # RSA证书（传统客户端兼容）
    ssl_certificate /etc/nginx/ssl/voidix.net/RSA/voidix.cer;
    ssl_certificate_key /etc/nginx/ssl/voidix.net/RSA/voidix.key;
    
    # SSL安全配置
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # HSTS安全头
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # 安全头配置
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # CSP内容安全策略 - 为React应用和搜索引擎脚本优化
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com https://lf1-cdn-tos.bytegoofy.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' https://www.google-analytics.com wss:; object-src 'none'; base-uri 'self'; form-action 'self';" always;
    
    # 网站根目录 - 指向构建文件目录
    root /var/www/voidix.net/dist;
    index index.html;
    
    # Gzip压缩配置
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml+rss
        application/atom+xml
        image/svg+xml
        font/woff
        font/woff2;
    
    # SEO优化：HTML扩展名重定向配置 - 优先处理
    # 将 /x.html 重定向到 /x（无扩展名）
    # 使用负向前瞻断言排除 index.html 避免重定向循环
    location ~ ^/(?!index)(.+)\.html$ {
        return 301 /$1;
    }
    
    # 静态资源文件处理 - 不存在的文件重定向到React 404页面
    # 注意：不包含html文件，html文件由上面的重定向规则处理
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|webp|woff|woff2|ttf|eot|map|txt|xml)$ {
        # 尝试提供静态文件，如果不存在则重定向到 /not-found
        try_files $uri @static_not_found;
        
        # 静态文件缓存配置
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff";
        
        # 字体文件CORS支持
        location ~* \.(woff|woff2)$ {
            add_header Access-Control-Allow-Origin "*";
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
    }
    
    # PWA图标和Logo文件专用配置 - 防止过度请求
    location ~* ^/(android-chrome-|apple-touch-icon|favicon\.|logo\.) {
        try_files $uri =404;
        expires 30d;
        add_header Cache-Control "public, immutable";
        add_header Content-Type "image/png";
        
        # 添加ETag支持，减少重复传输
        etag on;
        
        # 访问日志单独记录（可选）
        access_log /var/log/nginx/voidix_icons.log;
    }
    
    # 静态文件不存在时重定向到React 404页面
    location @static_not_found {
        return 302 /not-found;
    }
    
    # 主路由配置 - SPA应用路由，处理其他所有请求
    location / {
        # 尝试提供文件或目录，不存在则回退到index.html
        try_files $uri $uri/ /index.html;
    }
    
    # 预渲染页面直接服务（SEO优化）
    location /status {
        try_files /status/index.html /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    location /faq {
        try_files /faq/index.html /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    location /bug-report {
        try_files /bug-report/index.html /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    location /privacy {
        try_files /privacy/index.html /index.html;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # API代理配置（如需要）
    location /api/ {
        proxy_pass http://localhost:3001;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_cache_bypass $http_upgrade;
    }
    
    # WebSocket支持（用于开发环境热重载）
    location /ws {
        proxy_pass http://localhost:5173;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        proxy_set_header Host $host;
        proxy_set_header Origin "";
    }
    
    # SEO优化文件
    location = /robots.txt {
        add_header Content-Type text/plain;
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
    }
    
    location = /sitemap.xml {
        add_header Content-Type application/xml;
        expires 1d;
        add_header Cache-Control "public, must-revalidate";
    }
    
    # 健康检查端点
    location = /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }
    
    # 隐藏敏感文件
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    location ~ \.(md|json|lock|log)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 错误页面配置
    # 只有服务器错误才重定向到index.html，404交给上面的配置处理
    error_page 500 502 503 504 /index.html;
    
    # 访问日志配置
    access_log /var/log/nginx/voidix_access.log;
    error_log /var/log/nginx/voidix_error.log;
}